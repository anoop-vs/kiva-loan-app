# -*- coding: utf-8 -*-
"""Smith_Exercise2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1QjNg-W5CKgg2CxsA9Vq9NupExTJfDdY4
"""

import os
import pandas as pd
import spacy
import pickle
from spacy.util import minibatch, compounding




df = pd.read_csv('kiva_train.csv',header=0)
df_test = pd.read_csv('kiva_test.csv',header=0)

df.head(3)

df.isna().sum()

df.shape

df.iloc[5]['en_clean']



nlp=spacy.load("en_core_web_sm")
textcat = nlp.create_pipe( "textcat", config={"exclusive_classes": True, "architecture": "simple_cnn"})
# Adding this to Pipe
nlp.add_pipe(textcat, last=True)
textcat.add_label("DEFAULT")
textcat.add_label("NODEFAULT")


textcat.labels

# Converting review text to tuple 
df['tuples'] = df.apply(lambda row: (row['en_clean'],row['defaulted']), axis=1)

df.head(1)

df["tuples"][0]

# Converting tuple to List 
train = df['tuples'].tolist()

print(train[0])
print(len(train))

texts, labels = zip(*train)

texts[0]

labels[1]

cats = []
for y in labels:
    if(bool(y)):
        cats.append({"DEFAULT": True, "NODEFAULT":False})
    else:
        cats.append({"DEFAULT": False, "NODEFAULT":True})

TrainX = texts
TrainY = cats

n_texts=6138

len(TrainX)

train_data = list(zip(TrainX,[{'cats': cats} for cats in TrainY]))

train_data[0]

n_iter=10



# Disabling other components
other_pipes = [pipe for pipe in nlp.pipe_names if pipe != 'textcat']
with nlp.disable_pipes(*other_pipes):  # only train textcat
    optimizer = nlp.begin_training()
    
    print("Training the model...")
    
    # Performing training
    for i in range(n_iter):
        print("Epoch : {} ".format(i))
        losses = {}
        batches = minibatch(train_data, size=compounding(4., 32., 1.001))
        for batch in batches:
            texts, annotations = zip(*batch)
            nlp.update(texts, annotations, sgd=optimizer, drop=0.2,
                       losses=losses)

nlp.to_disk("loan")

#nlp = spacy.load("loan")

#test_text = df.loc[8]["en_clean"]
#print(test_text)
#doc=nlp(test_text)
#doc.cats